import json
import time
from datetime import datetime
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict
import random

@dataclass
class EnvironmentData:
    """D·ªØ li·ªáu m√¥i tr∆∞·ªùng"""
    nhi·ªát_ƒë·ªô: float
    ƒë·ªô_·∫©m: float
    et0: float

@dataclass
class InputData:
    """D·ªØ li·ªáu ƒë·∫ßu v√†o c·ªßa chu tr√¨nh"""
    T_ch·ªù_ph√∫t: int
    m√¥i_tr∆∞·ªùng_tb: EnvironmentData

@dataclass
class OutputData:
    """K·∫øt qu·∫£ ƒëo ƒë∆∞·ª£c c·ªßa chu tr√¨nh"""
    T_ƒë·∫ßy_gi√¢y: int
    EC_ƒëo_ƒë∆∞·ª£c: float

@dataclass
class CycleRecord:
    """B·∫£n ghi ho√†n ch·ªânh c·ªßa m·ªôt chu tr√¨nh t∆∞·ªõi"""
    id: int
    timestamp: str
    phase: str  # "calibration" ho·∫∑c "operation"
    input_data: InputData
    output_data: OutputData
    reflection_text: str = ""

    def to_dict(self) -> Dict:
        """Chuy·ªÉn ƒë·ªïi sang dictionary ƒë·ªÉ l∆∞u JSON"""
        return {
            "id": self.id,
            "timestamp": self.timestamp,
            "phase": self.phase,
            "input_data": asdict(self.input_data),
            "output_data": asdict(self.output_data),
            "reflection_text": self.reflection_text
        }

class Controller:
    """B·ªô ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã t∆∞·ªõi (m√¥ ph·ªèng)"""
    
    def __init__(self):
        self.tank_capacity = 100  # Dung t√≠ch b√¨nh ch·ª©a
        
    def t∆∞·ªõi_cho_ƒë·∫øn_khi_ƒë·∫ßy(self) -> tuple[int, float]:
        """
        M√¥ ph·ªèng qu√° tr√¨nh t∆∞·ªõi v√† ƒëo EC
        Returns: (T_ƒë·∫ßy_gi√¢y, EC_ƒëo_ƒë∆∞·ª£c)
        """
        print("üöø B·∫Øt ƒë·∫ßu t∆∞·ªõi...")
        
        # M√¥ ph·ªèng th·ªùi gian t∆∞·ªõi (30-60 gi√¢y)
        T_ƒë·∫ßy = random.randint(30, 60)
        
        # M√¥ ph·ªèng ƒëo EC (3.5-5.5)
        EC = round(random.uniform(3.5, 5.5), 1)
        
        # M√¥ ph·ªèng qu√° tr√¨nh t∆∞·ªõi
        time.sleep(2)  # M√¥ ph·ªèng th·ªùi gian th·ª±c t·∫ø
        
        print(f"‚úÖ T∆∞·ªõi ho√†n th√†nh! Th·ªùi gian: {T_ƒë·∫ßy}s, EC: {EC}")
        return T_ƒë·∫ßy, EC

class Database:
    """C∆° s·ªü d·ªØ li·ªáu l∆∞u tr·ªØ l·ªãch s·ª≠"""
    
    def __init__(self, file_path: str = "irrigation_history.json"):
        self.file_path = file_path
        self.data: List[Dict] = self._load_data()
        
    def _load_data(self) -> List[Dict]:
        """T·∫£i d·ªØ li·ªáu t·ª´ file JSON"""
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            return []
            
    def _save_data(self):
        """L∆∞u d·ªØ li·ªáu v√†o file JSON"""
        with open(self.file_path, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False, indent=2)
            
    def add_record(self, record: CycleRecord):
        """Th√™m b·∫£n ghi m·ªõi"""
        self.data.append(record.to_dict())
        self._save_data()
        print(f"üíæ ƒê√£ l∆∞u b·∫£n ghi #{record.id}")
        
    def get_recent_records(self, days: int = 3) -> List[Dict]:
        """L·∫•y b·∫£n ghi trong N ng√†y g·∫ßn nh·∫•t"""
        # ƒê∆°n gi·∫£n h√≥a: l·∫•y N b·∫£n ghi cu·ªëi c√πng
        return self.data[-days*8:] if self.data else []
        
    def get_last_record(self) -> Optional[Dict]:
        """L·∫•y b·∫£n ghi cu·ªëi c√πng"""
        return self.data[-1] if self.data else None
        
    def get_next_id(self) -> int:
        """L·∫•y ID cho b·∫£n ghi ti·∫øp theo"""
        return len(self.data) + 1

class EnvironmentSensor:
    """C·∫£m bi·∫øn m√¥i tr∆∞·ªùng (m√¥ ph·ªèng)"""
    
    @staticmethod
    def get_current_environment() -> EnvironmentData:
        """L·∫•y d·ªØ li·ªáu m√¥i tr∆∞·ªùng hi·ªán t·∫°i"""
        return EnvironmentData(
            nhi·ªát_ƒë·ªô=round(random.uniform(28, 35), 1),
            ƒë·ªô_·∫©m=round(random.uniform(60, 80), 1),
            et0=round(random.uniform(0.2, 0.3), 2)
        )
        
    @staticmethod
    def get_weather_forecast() -> str:
        """L·∫•y d·ª± b√°o th·ªùi ti·∫øt"""
        forecasts = [
            "Tr·ªùi n·∫Øng, nhi·ªát ƒë·ªô c√≥ xu h∆∞·ªõng tƒÉng nh·∫π.",
            "Th·ªùi ti·∫øt ·ªïn ƒë·ªãnh, ƒë·ªô ·∫©m trung b√¨nh.",
            "C√≥ th·ªÉ c√≥ m∆∞a nh·∫π v√†o chi·ªÅu.",
            "Tr·ªùi √¢m u, ƒë·ªô ·∫©m cao."
        ]
        return random.choice(forecasts)
